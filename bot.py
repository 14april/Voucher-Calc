import os
import discord
from discord import app_commands
from discord.ext import commands
from datetime import datetime

# ====== C·∫•u h√¨nh intents ======
intents = discord.Intents.default()
intents.message_content = True

# ====== T·∫°o bot ======
bot = commands.Bot(command_prefix="!", intents=intents)

# ====== Khi bot s·∫µn s√†ng ======
@bot.event
async def on_ready():
    print(f"‚úÖ Bot ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng: {bot.user}")
    try:
        synced = await bot.tree.sync()
        print(f"üîÅ ƒê√£ ƒë·ªìng b·ªô {len(synced)} l·ªánh slash.")
    except Exception as e:
        print(f"‚ùå L·ªói sync command: {e}")

# ====== Slash command /calc ======
@bot.tree.command(name="calc", description="T√≠nh s·ªë v√© trong t∆∞∆°ng lai üìÖ")
async def calc(interaction: discord.Interaction):
    # T·∫°o 2 n√∫t ch·ªçn
    class TicketSelect(discord.ui.View):
        def __init__(self):
            super().__init__(timeout=60)

        @discord.ui.button(label="V√© ƒëen", style=discord.ButtonStyle.primary, emoji="<:bt:1378705629182562304>")
        async def black_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
            await ask_current_ticket(interaction, "ƒëen")

        @discord.ui.button(label="V√© k·ªâ v·∫≠t", style=discord.ButtonStyle.success, emoji="<:ks:1378705636396892330>")
        async def relic_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
            await ask_current_ticket(interaction, "k·ªâ v·∫≠t")

    await interaction.response.send_message("üéØ Ch·ªçn lo·∫°i v√© b·∫°n mu·ªën t√≠nh:", view=TicketSelect(), ephemeral=True)

# ====== H·ªèi s·ªë v√© hi·ªán t·∫°i & s·ªë th√°ng c·∫ßn t√≠nh ======
async def ask_current_ticket(interaction: discord.Interaction, ticket_type: str):
    await interaction.response.send_message(f"üßÆ Nh·∫≠p **s·ªë v√© {ticket_type} hi·ªán t·∫°i** c·ªßa b·∫°n:", ephemeral=True)

    def check(msg):
        return msg.author == interaction.user and msg.channel == interaction.channel

    msg = await bot.wait_for("message", check=check)
    try:
        current_ticket = int(msg.content)
    except ValueError:
        await interaction.followup.send("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá.", ephemeral=True)
        return

    await interaction.followup.send("üìÜ Nh·∫≠p **s·ªë th√°ng c·∫ßn t√≠nh (1‚Äì12)**:", ephemeral=True)
    msg2 = await bot.wait_for("message", check=check)
    try:
        months = int(msg2.content)
        if not (1 <= months <= 12):
            raise ValueError
    except ValueError:
        await interaction.followup.send("‚ö†Ô∏è S·ªë th√°ng ph·∫£i t·ª´ 1 ƒë·∫øn 12.", ephemeral=True)
        return

    # ====== T√≠nh k·∫øt qu·∫£ v·ªõi th√°ng/nƒÉm th·ª±c ======
    now = datetime.now()
    current_month = now.month
    current_year = now.year
    per_month = 81 if ticket_type == "ƒëen" else 18

    results = []
    ticket = current_ticket

    for i in range(1, months + 1):
        next_month = current_month + i
        next_year = current_year
        if next_month > 12:
            next_month -= 12
            next_year += 1

        ticket += per_month
        results.append(f"üìÖ **Th√°ng {next_month}/{next_year}:** {ticket} v√© {ticket_type}")

    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    await interaction.followup.send(
        f"‚úÖ **K·∫øt qu·∫£ d·ª± t√≠nh cho v√© {ticket_type}:**\n" + "\n".join(results),
        ephemeral=True
    )

# ====== Ch·∫°y bot ======
TOKEN = os.getenv("DISCORD_TOKEN")
if not TOKEN:
    print("‚ö†Ô∏è Ch∆∞a c√≥ bi·∫øn m√¥i tr∆∞·ªùng DISCORD_TOKEN!")
else:
    bot.run(TOKEN)
