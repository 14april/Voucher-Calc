import os
import discord
from discord import app_commands
from discord.ext import commands
from datetime import datetime

# ====== C·∫•u h√¨nh intents ======
intents = discord.Intents.default()
intents.message_content = True

# ====== T·∫°o bot ======
bot = commands.Bot(command_prefix="!", intents=intents)

# ====== Khi bot s·∫µn s√†ng ======
@bot.event
async def on_ready():
    print(f"‚úÖ Bot ƒë√£ ƒëƒÉng nh·∫≠p th√†nh c√¥ng: {bot.user}")
    try:
        synced = await bot.tree.sync()
        print(f"üîÅ ƒê√£ ƒë·ªìng b·ªô {len(synced)} l·ªánh slash.")
    except Exception as e:
        print(f"‚ùå L·ªói sync command: {e}")

# ====== Modal nh·∫≠p th√¥ng tin ======
class TicketModal(discord.ui.Modal):
    def __init__(self, ticket_type: str):
        super().__init__(title="üìã Nh·∫≠p th√¥ng tin t√≠nh v√©")
        self.ticket_type = ticket_type

        # √î nh·∫≠p s·ªë v√© hi·ªán t·∫°i
        self.current_ticket = discord.ui.TextInput(
            label=f"S·ªë v√© {ticket_type} hi·ªán t·∫°i",
            placeholder="vd: 20",
            style=discord.TextStyle.short,
            required=True,
            max_length=10
        )

        # √î nh·∫≠p s·ªë th√°ng c·∫ßn t√≠nh
        self.months = discord.ui.TextInput(
            label="S·ªë th√°ng c·∫ßn t√≠nh (1‚Äì12)",
            placeholder="vd: 4",
            style=discord.TextStyle.short,
            required=True,
            max_length=2
        )

        self.add_item(self.current_ticket)
        self.add_item(self.months)

    async def on_submit(self, interaction: discord.Interaction):
        try:
            current_ticket = int(self.current_ticket.value.strip())
            months = int(self.months.value.strip())
            if not (1 <= months <= 12):
                raise ValueError
        except ValueError:
            await interaction.response.send_message(
                "‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá (v√© l√† s·ªë nguy√™n, th√°ng t·ª´ 1‚Äì12).",
                ephemeral=True
            )
            return

        # ====== T√≠nh to√°n ======
        now = datetime.now()
        current_month = now.month
        current_year = now.year

        per_month = 81 if self.ticket_type == "ƒëen" else 18
        ticket = current_ticket
        results = []

        for i in range(1, months + 1):
            next_month = current_month + i
            next_year = current_year
            if next_month > 12:
                next_month -= 12
                next_year += 1

            ticket += per_month
            results.append(f"üìÖ **Th√°ng {next_month}/{next_year}:** {ticket} v√© {self.ticket_type}")

        # ====== G·ª≠i k·∫øt qu·∫£ ======
        embed = discord.Embed(
            title=f"üìä D·ª± t√≠nh v√© {self.ticket_type}",
            description="\n".join(results),
            color=discord.Color.green()
        )
        embed.set_footer(text=f"T√≠nh t·ª´ th√°ng {current_month}/{current_year}")

        await interaction.response.send_message(embed=embed, ephemeral=True)

# ====== Giao di·ªán ch·ªçn lo·∫°i v√© ======
class TicketSelect(discord.ui.View):
    @discord.ui.button(label="V√© ƒëen", style=discord.ButtonStyle.primary, emoji="<:bt:1378705629182562304>")
    async def black_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_modal(TicketModal("ƒëen"))

    @discord.ui.button(label="V√© k·ªâ v·∫≠t", style=discord.ButtonStyle.success, emoji="<:ks:1378705636396892330>")
    async def relic_ticket(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_modal(TicketModal("k·ªâ v·∫≠t"))

# ====== Slash command /calc ======
@bot.tree.command(name="calc", description="T√≠nh s·ªë v√© trong t∆∞∆°ng lai üìÖ")
async def calc(interaction: discord.Interaction):
    await interaction.response.send_message("üéØ Ch·ªçn lo·∫°i v√© b·∫°n mu·ªën t√≠nh:", view=TicketSelect(), ephemeral=True)

# ====== Ch·∫°y bot ======
TOKEN = os.getenv("DISCORD_TOKEN")
if not TOKEN:
    print("‚ö†Ô∏è Ch∆∞a c√≥ bi·∫øn m√¥i tr∆∞·ªùng DISCORD_TOKEN!")
else:
    bot.run(TOKEN)
